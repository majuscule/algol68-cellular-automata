#
  this is a comment
#
COMMENT
  and so is this.
  don't nest comments of the same type!
COMMENT

# this is a basic procedure. arguments are optional. it goes like this:
  PROC name = (ARGUMENT_TYPE ARGUMENT_NAME) RETURN_TYPE: BEGIN
#
PROC say_hello = VOID: BEGIN
  # this is a friendly string, don't worry about the bounds! #
  # but it wants an initial length anyway. #
  FLEX [11] CHAR banner := "HELLO ALGOL";
  banner +:= " 68";
  print ( (banner, newline, newline) )
END;

# the universe will be a size * size grid #
INT size := 10;
# and we will enumerate over this many generations #
INT generations := 2;

# a MODE is a type definition #
# MODE identifiers must be in CAPITALS #
MODE CELL = STRUCT (
  BOOL alive,
  # this struct is kinda silly, but it's good to know how.
    maybe it'l come in handy if we wanna draw these on something #
  INT x,
  INT y
);

# arrays are 1-indexed #
MODE UNIVERSE = [size][size] CELL;

PROC tick = (REF UNIVERSE universe) VOID: BEGIN
  # updates to the universe must be atomic by generation,
    meaning if a cell is reanimated, it is not counted as such
    by it's adjacent cells until the next generation. to avoid
    this, we create a representative 2D array in scope. still using
    the reference so we don't have to worry about keeping the rest
    of the structure intact #
  [size][size] BOOL cells;
  # FOR loops are 1-indexed #
  FOR i TO size DO
    FOR ii TO size DO
      INT neighbors := 0;
      # loop around the cells neighbors using ternary operators #
      # first the top, then the bottom, then the right, then the left #
      # literally SKIP literal border cases #
      IF i /= 1 THEN
        IF ii /= size THEN
          (alive OF REF UNIVERSE(universe)[i-1][ii+1] | neighbors +:= 1 | SKIP )
        FI;
        IF ii /= 1 THEN
          (alive OF REF UNIVERSE(universe)[i-1][ii-1] | neighbors +:= 1 | SKIP )
        FI;
        (alive OF REF UNIVERSE(universe)[i-1][ii] | neighbors +:= 1 | SKIP )
      FI;
      IF i /= size THEN
        IF ii /= size THEN
          (alive OF REF UNIVERSE(universe)[i+1][ii+1] | neighbors +:= 1 | SKIP )
        FI;
        IF ii /= 1 THEN
          (alive OF REF UNIVERSE(universe)[i+1][ii-1] | neighbors +:= 1 | SKIP )
        FI;
        (alive OF REF UNIVERSE(universe)[i+1][ii] | neighbors +:= 1 | SKIP )
      FI;
      IF ii /= size THEN
        (alive OF REF UNIVERSE(universe)[i][ii+1] | neighbors +:= 1 | SKIP )
      FI;
      IF ii /= 1 THEN
        (alive OF REF UNIVERSE(universe)[i][ii-1] | neighbors +:= 1 | SKIP )
      FI;
      # the rules of life! #
      IF neighbors < 2 OR neighbors > 3 THEN
        cells[i][ii] := FALSE
      ELSE
        IF neighbors = 3 THEN
          cells[i][ii] := TRUE
        ELSE
          cells[i][ii] := alive OF REF UNIVERSE(universe)[i][ii]
        FI
      FI;
      IF cells[i][ii] THEN
        print("1") ELSE print("0") FI
    OD;
    print(newline)
  OD;
  # update universe to the next generation (stored in cells) by reference #
  FOR i TO size DO FOR ii TO size DO alive OF REF UNIVERSE(universe)[i][ii] := cells[i][ii] OD OD
END;

PROC init = UNIVERSE: BEGIN
  UNIVERSE universe;
  FOR i TO size DO
    FOR ii TO size DO
      # random, like print, is a function in the standard prelude #
      alive OF universe[i][ii] := random > .5
    OD
  OD;
  # the last thing said is the return value #
  universe
COMMENT
  When I was using this function to return a REF to a variable
  declared in this function, I got the error:
    REF UNIVERSE value is exported out of its scope
  Does this mean no constructors or closures?
COMMENT
#
  REF UNIVERSE universe_ref := universe;
  universe_ref
#
END;

# main entry label is unnecessary #
main:
# parethesis are interchangable with BEGIN..END blocks #
(

  # don't use parenthesis on a procedure call if there are no arguments #
  say_hello;

  UNIVERSE universe := init();

  FOR i TO size DO
    FOR ii TO size DO
      IF alive OF universe[i][ii] THEN
        print("1") ELSE print("0") FI
    OD;
    print(newline)
  OD;

  print( ( newline, newline ) );

  FOR i TO generations DO
    tick(universe);
    print( ( newline, newline ) )
  OD

)
